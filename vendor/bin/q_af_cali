#!/system/bin/sh 
default="-1"
record="1"
frametime="33333"
second=$((30*$frametime))
timeout=$((25*$second))
timeout_short=$((5*$second))
PD_dac="100"
TAG="CameraAFCali"
Version="3.2.2"

#$1 = camdir(0: rear, 1: front, 2: rear2)
#$2 = scene (0: result, 1: inf, 2: macro, 3: thirty, 4: fifty) PD/laser switch (8: laser 9: PD)
#$3 = func  (0: record Vertical calibration 1: OTP search 2: Horizon calibration and record 3: get PD data diff 4: get Hor PD data diff)
#			(5: check PDAF result 6: check laser AF result 7: move VCM to Contrast AF BestPos 8: record Laser BestPos 9: record PDAF BestPos ) PD/laser switch (0: OFF 3: ON)

REG="/proc/driver/ois_i2c_rw"
ON="/proc/driver/ois_power"

#++++++++++++++++++++++++++++++++++++path workaround
root_path=`dirname $0`
if [ -f $root_path/test_qafCali ]
then
	path=$root_path/test_qafCali
elif [ -f "/vendor/bin/test_qafCali" ]
then
	path=/vendor/bin/test_qafCali
elif [ -f "/system/bin/test_qafCali" ]
then
	path=/system/bin/test_qafCali
else
	echo "File not found, please check test_qafCali path."
	exit 0
fi
#------------------------------------path workaround

#++++++++++++++++++++++++++++++++++++ Draco set dac
function read_ois_value()
{
	echo $1 4 > $REG #dword
	cat $REG
}

function write_ois_value()
{
	echo $1 4 $2 > $REG #dword, kernel write at once
}

function set_dac()
{
	hex=$(printf "0x%x" $1)
	echo "convert ${1} to $hex"
	write_ois_value 0xF01A $hex

	echo "reg val now is $(read_ois_value 0xF01A)"
}
#------------------------------------
function printlog(){
	log -p d -t $TAG ${1}
}

function polling(){				
	count=0;
	while [ "${value::1}" = "0" ] && [ count -lt 5 ]; 
	do
		usleep $frametime
		value=`$path ${1} 26`
		printlog $count"PD="$value
		echo $count"PD="$value
		count=$(($count+1));
	done;
}

function echowithlog(){
	printlog "saving ${2}"
	echo ${1} > ${2}
	printlog "saving ${2} done"
}

printlog "q_af_cali start"


case $2 in
	0)
		# run AF calibration
		$path $1 0
		echo 1
	;;
	1)
		case $3 in
			0)
				# record infinity best focused VCM position
				$path $1 1
				echo 1			
			;;
			1)		
				# move VCM to OTP infinity and search short range

			;;
			2)
				# move VCM to OTP infinity and search big range
				#record infinity Horizon best focused VCM position
				$path $1 2
				echo 1	
			;;
			3)
				## move VCM from bestPos
				value=`$path $1 40`
				#echo $value
				PD_dac=`$path $1 25`
				#echo $PD_dac
				#echowithlog $PD_dac /data/data/pd_shift_inf.txt
				value=$(($value + $PD_dac));
				#echo $value
				Camera_OIS_Write_DAC $1 $value
				usleep 1000000
				value=`$path $1 26`
				printlog "PD="$value
				polling $1
				
				infpd=`$path $1 42`
				echowithlog $value /data/data/pd_inf.txt
				echowithlog $value $infpd
				value=`$path $1 20`			
	
				#echowithlog $value /data/data/pd_inf_diff.txt
				
				Camera_OIS_Write_DAC $1 "END"
				echo 1
			;;
			4)
				## move VCM from bestPos
				value=`$path $1 41`
				PD_dac=`$path $1 25`
				echowithlog $PD_dac /data/data/pd_shift_inf.txt
				value=$(($value + $PD_dac))
				Camera_OIS_Write_DAC $1 $value
				usleep 1000000
				value=`$path $1 26`
				printlog "PD="$value
				polling $1
				infpd=`$path $1 42`
				echowithlog $value $infpd
				value=`$path $1 20`
				echowithlog $value /data/data/pd_inf_diff.txt
				Camera_OIS_Write_DAC $1 "END"
				echo 1
			;;
			5)
				##save PDAF bestpos and check DAC diff
				#value=`$path $1 30`
				#echowithlog $value /data/data/pd_vcm_inf_diff.txt
				#echo 1
			;;
			6)
				##save Laser bestpos and check DAC diff
				#value=`$path $1 34`
				#echowithlog $value /data/data/laser_vcm_inf_diff.txt
				#echo 1
			;;
			7)
				##move VCM to Contrast AF BestPos
				#value=`$path $1 40`
				#				
				#setprop media.camera.debug.return "$default"
				#setprop media.camera.debug.param2 "$value"
				#setprop media.camera.debug.param1 0
				#polling $timeout_short
                #
				#checkresult
			;;
			8)
				##save Laser bestpos
				#$path $1 54
				#echo 1			
			;;
			9)
				#save PDAF bestpos
				$path $1 50
				echo 1			
			;;
			*)
				echo "Invalid argument!!(par2 : commandID = 0~9)"
			;;
		esac
	;;
	
	2)
		case $3 in
			0)
				# record macro best focused VCM position
				$path $1 4
				echo 1			
			;;
			1)		
				
			;;
			2)		
				#record Horizon best focused VCM Macro position
				$path $1 5
				echo 1	
			;;
			3)
				# move VCM from bestPos
				value=`$path $1 43`
				PD_dac=`$path $1 25`
				#echowithlog $PD_dac /data/data/pd_shift_macro.txt
				value=$(($value - $PD_dac))
				Camera_OIS_Write_DAC $1 $value
				usleep 1000000
				value=`$path $1 26`
				printlog "PD="$value
				polling $1
				macropd=`$path $1 45`
				echowithlog $value /data/data/pd_macro.txt
				echowithlog $value $macropd
				value=`$path $1 23`
				#echowithlog $value /data/data/pd_macro_diff.txt
				Camera_OIS_Write_DAC $1 "END"
				echo 1
			;;
			4)
				## move VCM from Hor bestPos
				value=`$path $1 44`
				PD_dac=`$path $1 25`
				echowithlog $PD_dac /data/data/pd_shift_macro.txt
				value=$(($value - $PD_dac))
				Camera_OIS_Write_DAC $1 $value
				usleep 1000000
				value=`$path $1 26`
				printlog "PD="$value
				polling $1
				macropd=`$path $1 45`
				echowithlog $value $macropd
				value=`$path $1 23`
				echowithlog $value /data/data/pd_macro_diff.txt
				Camera_OIS_Write_DAC $1 "END"
				echo 1
			;;
			5)
				##save PDAF bestpos and check DAC diff
				#value=`$path $1 33`
				#echowithlog $value /data/data/pd_vcm_macro_diff.txt
				#echo 1
			;;
			6)
				##save LaserAF bestpos and check DAC diff
				#value=`$path $1 37`
				#echowithlog $value /data/data/laser_vcm_macro_diff.txt
				#echo 1
			;;
			7)
				##move VCM to Contrast AF BestPos
				#value=`$path $1 43`
				#
				#setprop media.camera.debug.return "$default"
				#setprop media.camera.debug.param2 "$value"
				#setprop media.camera.debug.param1 0
				#polling $timeout_short
				#checkresult
			;;
			8)
				##save Laser bestpos
				#$path $1 55
				#echo 1			
			;;
			9)
				#save PDAF bestpos
				$path $1 51
				echo 1			
			;;
			*)
				echo "Invalid argument!!(par2 : commandID = 0~9)"
			;;
		esac
	;;
	3)
		case $3 in
			0)
				# record thirty best focused VCM position
				$path $1 7
				echo 1	
			;;
			1)		
				
			;;
			2)		
				
				echo 1	
			;;
			3)
				## move VCM from bestPos
				value=`$path $1 46`
				PD_dac=`$path $1 25`
				echowithlog $PD_dac /data/data/pd_shift_30cm.txt
				value=$(($value + $PD_dac))
				Camera_OIS_Write_DAC $1 $value
				usleep 1000000
				value=`$path $1 26`
				printlog "PD="$value
				polling $1
				thirtypd=`$path $1 47`
				echowithlog $value $thirtypd
				value=`$path $1 22`
				echowithlog $value /data/data/pd_30cm_diff.txt
				Camera_OIS_Write_DAC $1 "END"
				echo 1
			;;
			5)
				##save PDAF bestpos and check DAC diff
				#value=`$path $1 32`
				#echowithlog $value /data/data/pd_vcm_30cm_diff.txt
				#echo 1
			;;
			6)
				##save LaserAF bestpos and check DAC diff
				#value=`$path $1 36`
				#echowithlog $value /data/data/laser_vcm_30cm_diff.txt
				#echo 1
			;;
			7)
				##move VCM to Contrast AF BestPos
				#value=`$path $1 46`
				#
				#setprop media.camera.debug.return "$default"
				#setprop media.camera.debug.param2 "$value"
				#setprop media.camera.debug.param1 0
				#polling $timeout_short
				#checkresult
			;;
			8)
				##save Laser bestpos
				#$path $1 56
				#echo 1			
			;;
			9)
				#save PDAF bestpos
				$path $1 52
				echo 1			
			;;
			*)
				echo "Invalid argument!!(par2 : commandID = 0~9)"
			;;
		esac
	;;
	4)
		case $3 in
			0)
				# record fifty best focused VCM position
				$path $1 8
				echo 1			
			;;
			1)		

			;;
			2)		

				echo 1	
			;;
			3)
				## move VCM from bestPos
				value=`$path $1 48`
				PD_dac=`$path $1 25`
				echowithlog $PD_dac /data/data/pd_shift_50cm.txt
				value=$(($value + $PD_dac))
				Camera_OIS_Write_DAC $1 $value
				usleep 1000000
				value=`$path $1 26`
				printlog "PD="$value
				polling $1
				fiftypd=`$path $1 49`
				echowithlog $value $fiftypd
				value=`$path $1 21`
				echowithlog $value /data/data/pd_50cm_diff.txt
				Camera_OIS_Write_DAC $1 "END"
				echo 1
			;;
			5)
				##save PDAF bestpos and check DAC diff
				#value=`$path $1 31`
				#echowithlog $value /data/data/pd_vcm_50cm_diff.txt
				#echo 1

			;;
			6)
				##save PDAF bestpos and check DAC diff
				#value=`$path $1 35`
				#echowithlog $value /data/data/laser_vcm_50cm_diff.txt
				#echo 1
			;;
			7)
				##move VCM to Contrast AF BestPos
				#fiftypath=`$path $1 49`
				#value=`cat $fiftypath`
				#setprop media.camera.debug.return "$default"
				#setprop media.camera.debug.param2 "$value"
				#setprop media.camera.debug.param1 0
				#polling $timeout_short
				#checkresult
			;;
			8)
				##save Laser bestpos
				#$path $1 57
				#echo 1			
			;;
			9)
				#save PDAF bestpos
				$path $1 53
				echo 1			
			;;
			*)
				echo "Invalid argument!!(par2 : commandID = 0~9)"
			;;
		esac
	;;
	7)
		#set full search property
		setprop vendor.debug.camera.af.fullsweep $3
		echo 1
	;;
	8)
		## set laser ON/OFF
		## echo cmd = $2 ON/OFF = $3
		#setprop media.camera.debug.return "$default"
		#setprop media.camera.debug.param2 "$3"
		#setprop media.camera.debug.param1 "$2"
		#polling $timeout_short
		#checkresult
	;;
	9)
		# set PD ON/OFF
		# echo cmd = $2 ON/OFF = $3
		setprop persist.vendor.camera.dynamicEnablePDAF $3
		echo 1
	;;
	*)
	    echo "Invalid argument!!(par2 : commandID = 0~9)"
	;;
esac
printlog "q_af_cali done"
exit 0